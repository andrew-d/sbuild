// Code generated by go-bindata.
// sources:
// darwin-compile-flags-1.patch
// darwin-compile-flags-2.patch
// darwin-constructor-types-1.patch
// ncurses-5.9-gcc-5.patch
// DO NOT EDIT!

package ncurses

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _darwinCompileFlags1Patch = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x90\x51\x4f\xe2\x40\x14\x85\x9f\xdb\x5f\x71\xd3\x25\xb0\xbb\xdd\x01\x76\xd9\x82\x84\x34\xa1\xd4\xa2\x44\x14\x03\xc4\xf8\x36\x4c\x67\xa6\x30\xb1\x9d\x36\xd3\x01\x21\x86\xff\xee\x14\x43\xd4\x44\x5f\x6e\x9b\xf3\x9d\x73\xee\xcd\x30\x91\x24\x80\xd0\x5a\x68\x20\x2d\x9a\xcb\x44\xac\xb7\x8a\x43\xfc\xfe\x6f\x0b\xc9\xf8\x1e\xba\x9d\x7e\xdc\xeb\xb7\x9b\xcd\x7f\x1e\xeb\xf6\xe3\x0e\xfc\x6d\xb7\x7b\x9e\x67\x23\x84\x3e\x26\x6d\xd7\x75\x3f\xa5\x87\x43\x40\x9e\x77\xf1\xff\x4f\x0f\xdc\xd3\xb7\x0b\x46\x0a\xc7\x38\x9a\x8d\x6d\xb0\x2c\xba\xc9\x72\x06\xee\x1e\xb2\x27\x5c\x6e\x88\xe2\x0c\xa7\x22\x6e\x96\x9b\x0a\x0e\x06\x66\x32\xa2\x9e\x85\xfc\xfd\x0b\x7e\xfc\xdc\x09\x1b\x59\x56\xf4\xb8\x9c\x07\x38\x1c\x4f\x83\xab\x85\xef\x20\x99\x23\x5a\x14\xa8\x50\x9c\xe6\x59\xe1\x54\xb9\x30\xc4\x8b\xeb\x60\x1e\x5d\xe2\xd9\xfd\xb2\xf2\xb0\x83\x24\x99\xa0\x27\x78\x7b\x73\x86\xd3\xc9\xc8\x6f\xd4\x5e\xc2\xf0\x08\x66\x9e\xfa\x8e\x70\xf6\x9a\x2b\x00\x09\x59\x6a\x92\xa6\xd8\x28\xdc\x78\x8c\xc6\x84\x3a\xb6\x56\x31\x29\xf9\x9b\x36\x5c\x01\xaa\xf6\x12\x2d\x62\x91\x0a\x7d\xc0\x3b\xae\x4a\x91\x4b\x63\x0f\x46\x13\xfc\x10\xcd\x17\x93\xd9\x9d\xe9\xa5\x5b\xa5\xb8\xd4\xdf\xf2\xdc\x94\x35\xaa\x03\x35\x2f\x35\x38\x35\x9a\x60\xba\x33\x6f\x62\x96\x9e\x33\x0e\xf8\x40\xb6\x3a\x87\x7a\x1d\xbe\xc0\x3e\x89\x85\xfd\x1a\x00\x00\xff\xff\x4b\xc2\x3f\x92\xd2\x01\x00\x00")

func darwinCompileFlags1PatchBytes() ([]byte, error) {
	return bindataRead(
		_darwinCompileFlags1Patch,
		"darwin-compile-flags-1.patch",
	)
}

func darwinCompileFlags1Patch() (*asset, error) {
	bytes, err := darwinCompileFlags1PatchBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "darwin-compile-flags-1.patch", size: 466, mode: os.FileMode(420), modTime: time.Unix(1440046193, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _darwinCompileFlags2Patch = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x90\xdd\x6f\xda\x30\x14\xc5\x9f\x93\xbf\xe2\x2a\x43\xb0\x2d\x33\x1f\x13\x1f\x9b\x50\x24\x42\x16\x56\x54\x5a\x2a\x40\x55\xdf\x8c\xbf\x02\x56\x13\x27\x72\x0c\x05\x55\xfc\xef\x75\xa8\x78\x69\xe9\xcb\xb5\x74\xce\xb9\xbf\x7b\x64\x2e\x93\x04\x10\xda\x48\x03\xa4\x15\x72\xf2\xb7\xd7\x62\xb9\x4a\xe4\x66\xa7\x05\xd0\x8f\x8a\x2b\x15\x17\x07\xe8\x72\xda\x4f\x3a\x49\xb3\x29\xfe\xfc\xa6\xb4\x4b\xa1\xd3\x6e\x0f\x7a\x3d\x17\x21\xf4\x99\xe2\xfa\xbe\x7f\x85\x34\x1a\x01\x1a\x74\xfb\xed\x5f\x03\xf0\xcf\x6f\x1f\xac\x14\x4d\x70\x3c\x9f\xb8\xe0\x38\x6c\x9b\xe5\x1c\xfc\x03\x64\xcf\xb8\xdc\x12\x2d\x38\x4e\x25\x6d\x96\xdb\xca\x1c\x0e\xed\xe4\x44\xbf\x48\xf5\xf3\x07\x7c\xfb\xbe\x97\x2e\x72\x9c\xf8\x69\xb5\x08\x71\x34\x99\x85\xff\x97\x81\x87\x54\x8e\x58\x51\xa0\x42\x0b\x96\x67\x85\x57\xed\x45\x11\x5e\xde\x84\x8b\xf8\x1f\x9e\x3f\xac\xaa\x0c\x3f\x2a\x92\x49\x76\x36\xef\x6e\x2f\xe6\x6c\x3a\x0e\x1a\xb5\xd7\x28\x3a\x81\x9d\x67\xde\x09\x2e\x59\xdb\x02\x90\x54\xa5\x21\x69\x8a\xad\x22\x6c\xc6\x6a\x5c\xea\x53\x6b\x4d\x49\x29\xde\xb5\xd1\x1a\x50\x75\x97\x18\x49\x65\x2a\xcd\x11\xef\x85\x2e\x65\xae\x6c\x3c\x1c\x4f\xf1\x63\xbc\x58\x4e\xe7\xf7\x96\xcb\x76\x5a\x0b\x65\xbe\xf4\x73\x0b\x6b\x54\x05\x8d\x28\x0d\x78\x35\x96\x60\xb6\xb7\x7f\x62\x8f\x5e\x76\x3c\x08\x80\xec\x4c\x0e\xf5\x3a\x5c\xb1\x03\x42\xa5\xfb\x16\x00\x00\xff\xff\x3c\x94\x73\x4d\xea\x01\x00\x00")

func darwinCompileFlags2PatchBytes() ([]byte, error) {
	return bindataRead(
		_darwinCompileFlags2Patch,
		"darwin-compile-flags-2.patch",
	)
}

func darwinCompileFlags2Patch() (*asset, error) {
	bytes, err := darwinCompileFlags2PatchBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "darwin-compile-flags-2.patch", size: 490, mode: os.FileMode(420), modTime: time.Unix(1440046193, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _darwinConstructorTypes1Patch = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x92\x41\x6f\xaa\x40\x10\xc7\xcf\xf0\x29\xe6\x08\xac\xe8\x8a\x08\x2f\xbc\xe7\x0b\x46\x9f\x89\xc9\x6b\x2f\xd2\x53\xd3\x10\xc0\x55\x37\x01\xd6\xb0\x4b\x9b\x1e\xfa\xdd\x0b\x4b\xad\x45\x69\xda\x34\xad\x1c\x66\xb2\xc3\x7f\x76\x76\xfe\xf9\x99\xa6\x09\xd1\x20\x41\x68\x90\x94\x05\x27\x7c\xd3\xdf\xf5\x59\x41\xb7\x8a\x85\x87\x43\x13\xbb\xa6\x35\x82\x21\xf6\xf0\xd8\x1b\xd9\x7d\x7c\xf8\x00\x61\x0b\x63\x15\x21\x04\x71\xbb\xf9\xb4\xcf\xf1\x2c\x7c\xd6\xe7\xfb\x60\x3a\xae\xdb\x73\x01\x35\xc9\xf7\x55\x00\x78\x52\x41\x85\x7d\x19\xa7\x34\xf1\x54\x13\xe0\x7a\x26\x6f\xbd\xe1\xa4\x58\xb0\x22\x03\xed\xa5\x50\x1f\x16\x94\xa4\x6b\x90\x91\xdf\xde\xf5\x54\xf4\x09\xb9\xf1\x46\x0f\x8a\x52\x4d\x4c\x58\xce\x05\x04\x06\xec\xc3\xba\x6d\x1e\x89\x08\x26\xb0\x0a\xa6\xc1\x72\x16\xce\xa6\xab\x40\x0b\x0c\x5d\xc3\xfa\x41\x1f\x33\x96\xc2\x03\x15\xbb\x70\x53\x44\x19\x99\x2c\xa6\xff\x57\xff\x5a\x3f\xa3\x52\xb0\x39\x49\x89\x20\x61\x33\xac\xd1\xe8\xcd\xce\xbf\x1c\xb9\xb3\x4c\xf5\xce\x0a\x27\x22\x2c\xab\xc9\xa0\xc9\xa7\x84\x49\xc4\xc5\x9f\x7b\x46\xd7\x60\xfc\xd5\x8e\x8f\xd2\xf5\xdf\xd2\xa0\x2a\x5e\xc6\x18\x9a\x0b\xc8\x53\x9a\x13\xde\xaa\x24\x2c\x6d\x15\x62\xb2\xa5\x79\xf8\x58\x79\x86\x7b\xea\x29\x4a\xd9\xbb\x28\x8d\xcf\x91\x38\x45\x29\xeb\x42\xc9\x76\xba\x51\x1a\x8d\xa5\xad\x32\x7d\x88\xd2\x15\xc9\xcb\x57\x0b\xea\xc3\x52\x90\x0c\xea\xd0\xe1\x57\xa7\xd8\x38\xaa\x2f\x80\x91\x9c\xd5\xa2\xc8\xb6\xe5\xba\x32\x7d\x0f\x45\x3f\xe0\xc9\x57\x08\x7a\x0e\x00\x00\xff\xff\xab\x02\xf0\x09\x8d\x04\x00\x00")

func darwinConstructorTypes1PatchBytes() ([]byte, error) {
	return bindataRead(
		_darwinConstructorTypes1Patch,
		"darwin-constructor-types-1.patch",
	)
}

func darwinConstructorTypes1Patch() (*asset, error) {
	bytes, err := darwinConstructorTypes1PatchBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "darwin-constructor-types-1.patch", size: 1165, mode: os.FileMode(420), modTime: time.Unix(1440046193, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _ncurses59Gcc5Patch = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\x7f\x6f\xdb\x36\x10\xfd\x3b\xfc\x14\x87\xc4\x40\x5a\x28\x14\x25\xd9\x8e\x7f\x20\xf3\x92\x36\x29\x06\xb4\x59\x82\x39\x43\xfe\x58\x36\x43\xa2\x28\x89\x8b\x44\x0a\x24\x65\x27\x40\x3f\xfc\x8e\x72\x63\x37\x01\x56\x60\x33\x0c\xe8\x78\xe4\x3d\xdd\xbd\xf7\xa8\xc2\xe8\x06\x2a\xe7\x5a\x3b\x67\xcc\xea\xce\x70\x61\xc3\x52\x28\xa7\x75\xa8\x4d\xc9\x78\x29\x69\x26\x15\x5b\x4b\xb1\x59\xf3\x10\x97\x6c\xbb\x4b\x9f\xa6\xa7\xcc\x3e\x5b\x5a\xcb\xcc\x32\xc5\x3b\x63\x85\x65\x85\xac\xc5\x6e\x45\xc7\xe1\x8c\x96\x9c\xe3\xb3\x4d\x1d\xaf\x7e\x36\x62\x2d\xad\xd4\xea\xa7\x38\x8c\xc9\xcb\x4b\xb3\xae\x7c\xf5\xc6\xf1\x68\x1c\xc7\x23\x42\xc4\x93\x33\x29\x77\x22\x87\xbe\x47\x57\x09\xe8\x5a\xeb\x8c\x48\x1b\xe0\x55\xaa\x4a\x01\xef\x36\x95\xe4\x15\x54\x69\x0e\x4d\xaa\x9e\xa1\x53\x46\xd4\xa9\x2f\xe1\xba\x69\xa4\xb3\x20\x15\x68\x25\xde\x13\xf2\xc9\x63\xcc\x26\x59\x36\x3a\x9d\x4c\x73\x1e\x0d\xc5\x64\x3c\x4c\x66\x51\x36\x9c\x65\x59\x51\x0c\xa3\x2c\x4d\xa6\xc9\x38\x2f\x66\xe3\x78\x02\xd7\x5a\xc1\x52\xb4\x80\x61\x14\xcd\xfb\x3f\x24\x51\x14\xf7\x30\x73\x38\xbc\xab\x74\x93\x5a\xb8\x0a\xe1\x52\xf2\x47\xf1\x7c\x08\x67\x79\x1f\x9c\x4b\xe5\x47\xcc\x6a\x41\xa5\xad\x53\x95\x87\x4a\xb8\x05\xb9\xc4\xa6\xe6\xb0\xec\xd4\x09\x4c\xe0\x52\x70\x04\x8b\x47\x10\x0d\xe7\x31\x42\xcf\x20\x88\xf0\x47\x96\x5d\xf6\xb7\xe0\x6e\x0e\x7f\xdc\x5e\xdc\x7d\xfc\xe5\x4f\xf8\x46\x23\x20\x8d\x40\xa1\xa7\xb0\x2f\x8c\x93\xe8\x94\x90\x00\x1a\x9d\xcb\xe2\x19\xae\x3f\xa3\x04\x2b\x64\x30\xb4\x15\x38\x0d\x1b\x6d\x1e\x21\x35\xba\x53\xf9\x0b\x51\x48\x43\x2e\xd6\xa2\xd6\x6d\x83\x44\xc3\x5a\x18\x2f\x03\xe8\x82\x00\xa0\x40\xb8\xef\x8c\xce\x3b\x8e\xcc\x55\xc2\x88\x39\x39\x80\x9d\x29\x70\x3f\x2c\x55\xd7\x6b\xd3\xd4\x7e\x49\xfb\x56\x50\x67\xdf\x0c\x8d\x4e\x59\x63\xcb\x28\x89\xa7\xe3\xb0\x72\x4d\xfd\x9f\x6a\x27\x7d\x6d\x94\x0c\x4f\xb7\xb5\x00\xef\x8c\x68\xb5\x41\xe9\x32\x9c\x2c\x35\xbc\xb3\xb0\xac\xd2\x0d\x37\xba\x70\x27\x98\xd1\x55\x27\xe1\x8b\x90\xef\x43\x42\x70\xfc\x02\x28\x2d\xa5\x83\x74\x67\xc1\x2c\xb5\x82\xbd\xe2\x24\xfb\xf7\x3d\x22\x55\x2e\x9e\x20\x9f\x72\x3e\xe4\xb3\x30\xcc\x66\xf1\x70\x36\xe5\x10\x47\xd1\x64\x3c\x26\x94\xd2\x1f\x21\x93\x20\x08\x7e\x88\x7e\x7e\x0e\x74\x34\x19\x9d\xc4\x31\x04\xfe\x99\x24\x80\x29\x8b\x34\x53\x05\xb4\x80\xc1\xd5\x65\x0c\x0f\xe4\x80\x0a\x38\xb6\xfe\x62\xad\x06\x8c\x1d\xef\x33\x00\x0c\x58\x79\x0c\x8b\xc5\xe0\xee\xfa\x16\x35\xe7\xa9\x83\x45\x5f\x75\x76\x76\x75\xf3\x89\x04\x2f\x67\x7c\xf4\x17\x30\xd6\x67\x06\xdb\xe7\xed\xea\xd7\x8f\xbf\xff\xb6\xbc\x5a\xae\x3e\xdc\xdc\x7c\x61\xaf\x16\x58\xd0\xd7\x93\xe0\x08\x2e\xbe\x79\x2b\x97\x16\xe9\xb6\x3b\x13\x04\x47\x07\xff\xdb\x04\x08\xbb\x33\x95\x05\xdb\x76\x46\x6a\x94\xf2\xa8\x96\x4a\xe0\x65\x35\x8f\x68\xc1\x10\xe0\xfe\x3b\xaf\xba\x0a\x87\x43\xd5\x65\xa9\xb4\x91\xaa\xec\xaf\x3c\x7e\x61\x9c\x68\x8e\xad\x07\x4c\x1d\x86\xad\xf3\x1e\xcf\x45\xe1\x81\x0e\x33\xad\xeb\x43\xc0\x7b\x06\x9d\xf5\x25\xf8\x01\x03\xbd\x51\x58\xd6\x64\xba\xee\xe7\x08\x91\x0a\x4f\x78\x4f\xa8\x3f\xff\x96\x17\xe4\xd7\xb3\x0b\x0b\x2f\x47\xb2\xe5\xd8\x47\xb0\x25\x3d\x20\x30\x68\xd1\x94\x46\xe3\x24\x56\x9b\xed\xe1\x64\xc1\xf0\x46\x31\xd5\xd5\x35\xca\x45\xbf\xf6\xa2\x62\xf0\x46\xb8\x7d\xc6\x8b\xf3\xfd\x7a\xf5\xc1\xb7\xf2\xb6\x91\x07\x12\x6c\xa1\xf6\xe6\x80\xaf\x30\xb8\xb8\xff\xdc\x67\x2e\xee\x93\x6d\x66\x7f\x64\xb8\x4f\x3c\x90\x7f\x02\x00\x00\xff\xff\x57\xf0\x8a\xc7\xce\x05\x00\x00")

func ncurses59Gcc5PatchBytes() ([]byte, error) {
	return bindataRead(
		_ncurses59Gcc5Patch,
		"ncurses-5.9-gcc-5.patch",
	)
}

func ncurses59Gcc5Patch() (*asset, error) {
	bytes, err := ncurses59Gcc5PatchBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ncurses-5.9-gcc-5.patch", size: 1486, mode: os.FileMode(420), modTime: time.Unix(1440046219, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"darwin-compile-flags-1.patch": darwinCompileFlags1Patch,
	"darwin-compile-flags-2.patch": darwinCompileFlags2Patch,
	"darwin-constructor-types-1.patch": darwinConstructorTypes1Patch,
	"ncurses-5.9-gcc-5.patch": ncurses59Gcc5Patch,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"darwin-compile-flags-1.patch": &bintree{darwinCompileFlags1Patch, map[string]*bintree{
	}},
	"darwin-compile-flags-2.patch": &bintree{darwinCompileFlags2Patch, map[string]*bintree{
	}},
	"darwin-constructor-types-1.patch": &bintree{darwinConstructorTypes1Patch, map[string]*bintree{
	}},
	"ncurses-5.9-gcc-5.patch": &bintree{ncurses59Gcc5Patch, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

